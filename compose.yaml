version: "3.9"
services:

  resource-db:
    image: postgres:16-alpine
    container_name: resource-db
    environment:
      POSTGRES_DB: ${RESOURCE_DB_NAME}
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
    ports:
      - "5431:5432"
    networks:
      - app-network
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${RESOURCE_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5


  song-db:
    image: postgres:16-alpine
    container_name: song-db
    environment:
      POSTGRES_DB: ${SONG_DB_NAME}
      POSTGRES_USER: ${SONG_DB_USER}
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SONG_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5


  resource-service:
    build:
      context: ./resource-service
    container_name: resource-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${RESOURCE_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${RESOURCE_DB_PASSWORD}
    depends_on:
      resource-db:
        condition: service_started
    networks:
      - app-network


  song-service:
    build:
      context: ./song-service
    container_name: song-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SONG_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${SONG_DB_PASSWORD}
    depends_on:
      song-db:
        condition: service_started
    networks:
      - app-network


networks:
  app-network:
    driver: bridge